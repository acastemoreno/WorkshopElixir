* Slide Options                           :noexport:
# ======= Appear in cover-slide ====================
#+TITLE: Elixir workshop
#+SUBTITLE: Introducción, Workshop
#+COMPANY: Codeable Cohort 2
#+AUTHOR: Albert Castellano Moreno
#+EMAIL: acastemoreno@gmail.com

# ======= Appear in thank-you-slide ================
#+GITHUB: http://github.com/acastemoreno

# ======= Appear under each slide ==================
#+FAVICON: images/elixir.png
#+ICON: images/elixir.png
#+HASHTAG: #Codeable #ElixirLang #ElixirWithLove

# ======= Google Analytics =========================
#+ANALYTICS: ----

# ======= Org settings =========================
#+EXCLUDE_TAGS: noexport
#+OPTIONS: toc:nil num:nil ^:nil
#+LANGUAGE: es
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="theme/css/custom.css" />

* Me
- Egresado de Codeable, 2do Cohort
- Software Engineer en Able.
- 6 años de experiencia con Elixir
  - Side-Projects y trabajos freelancer.
- I love elixir ❤️

* Contenido
- Introducción
 - Porque fue creado?
 - Projectos interesantes
 - Compañias usandolo
- Workshop
 - Pattern Matching
 - Functiones
 - +Pipe operator ❤️+
 - +Special Forms+
   - +case+
   - +with+
   - +for+

* Porque fue creado?
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* 
  :PROPERTIES:
  :FILL:     images/libros.jpg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/cpu0.jpg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/array-procesadores.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/multithreaded_programming.jpg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/ruby_process.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/codigo.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/ruby_results.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Segue (Hide Title)
  :PROPERTIES:
  :TITLE: hide
  :SLIDE: segue dark quote
  :ASIDE: right bottom
  :ARTICLE: flexbox vleft auto-fadein line-through
  :END:
#+BEGIN_QUOTE
Hasta que un joven programador, parte de la core team de Ruby on Rails, aparecio.
#+END_QUOTE

* Jose Valim
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/jose_valim.jpg]]
#+END_CENTER

* se encontro con un libro
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/seven_language.jpg]]
#+END_CENTER

* 
  :PROPERTIES:
  :FILL:     images/Erlang_logo.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/telefonista.jpg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
90% of all internet traffic going through routers and switches controlled by Erlang.
#+END_QUOTE

* Companies that are using Erlang
#+BEGIN_CENTER
#+ATTR_HTML: :height 370px
[[file:images/WhatsApp.png]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:1]
#+END_QUOTE

* Proceso de creación (2011)
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/pineapple_pen.gif]]
#+END_CENTER

* 
  :PROPERTIES:
  :FILL:     images/logos.jpg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Ruby -> Elixir (Developer Joy)
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/BOB-ROSS.jpg]]
#+END_CENTER

* Erlang -> Elixir (Runtime and 40 years of libraries)
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/erlang_elixir.png]]
#+END_CENTER

* Clojure -> Elixir (Metaprogramación)
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/metaprogramming.jpg]]
#+END_CENTER

* Segue (Hide Title)
  :PROPERTIES:
  :TITLE: hide
  :SLIDE: segue dark quote
  :ASIDE: right bottom
  :ARTICLE: flexbox vleft auto-fadein line-through
  :END:
#+BEGIN_QUOTE
Elixir is what would happen if Erlang, Clojure, and Ruby somehow had a baby and it wasn’t an accident.

–Devin Torres
#+END_QUOTE

* Proyectos interesantes
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* 
  :PROPERTIES:
  :FILL:     images/js_insane.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:1]
#+END_QUOTE

* 
  :PROPERTIES:
  :FILL:     images/ajax.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/channels.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* LiveView Aproarch
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* 
  :PROPERTIES:
  :FILL:     images/liveview.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:
  
* 
  :PROPERTIES:
  :FILL:     images/liveview2.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/tweat-liveview.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Machine Learning
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* 
  :PROPERTIES:
  :FILL:     images/nx.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/tweat-ml.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Some Companies using Elixir
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* 
  :PROPERTIES:
  :FILL:     images/companies/discord-elixir-banner.png
  :TITLE:    white
  :SLIDE:    white cover-image white_footer
  :END:
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:2]
solo para nota[fn:3]
solo para nota[fn:4]
#+END_QUOTE

* 
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/companies/toyota_connected_conf.png]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:5]
Nota[fn:6]
Nota[fn:7]
#+END_QUOTE

* 
#+BEGIN_CENTER
#+ATTR_HTML: :height 320px
[[file:images/companies/pinterest.jpeg]]
#+END_CENTER

- 200 servidores python a solo 4 con Elixir.
- 30 instancias c32.xl con Java a solo 15 con Elixir.

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota13[fn:8]
#+END_QUOTE

* 
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/companies/apc-schneider.jpg]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:9]
#+END_QUOTE

* 
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/companies/square_enix.png]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:10]
#+END_QUOTE

* Workshop
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* 
  :PROPERTIES:
  :FILL:     images/rocket.gif
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/livebook.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
- [[http://167.99.120.123/][LiveView in production]]
- Password: elixir_workshop_codeable
#+END_QUOTE

* Pattern Matching
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Pattern Matching
#+BEGIN_CENTER
#+ATTR_HTML: :width 300px
[[file:images/babe_pattern.gif]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:11]
Nota[fn:12]
#+END_QUOTE

* patron = data
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Pattern Matching
2 partes:
- *Data*: Expresion evaluada contra la cual se hara una comparación.
- *Patron*: Forma de data.
  -Contiene variables.

** Pattern Matching
Elixir *tratará* de asignar valores a las variables para que la comparación sea verdadera.

- La *asignación de variables* es una *posible consecuencia* de pattern matching. 

** Pattern Matching
#+BEGIN_SRC elixir
iex> nombre = "Albert"
"Albert"
iex> apodo = "amiguito"
"amiguito"
#+END_SRC
** Pattern Matching
Las variables pueden reasignarse.

Ejemplo:
#+BEGIN_SRC elixir
iex> nombre = "Albert"
"Albert"
iex> nombre = "Amiguito"
"Amiguito"
#+END_SRC

** Pattern Matching
Patrones complejos y multipartes puede ser usadas

Ejemplo:
#+BEGIN_SRC elixir
iex> {nombre, apodo} = {"Albert", "amiguito"}
{"Albert", "amiguito"}
iex> nombre
"Albert"
iex> apodo
"amiguito"
#+END_SRC

** Pattern Matching
Variables solo pueden enlazar una vez por match.

Ejemplo:
#+BEGIN_SRC elixir
#Contrajemplo
iex> {edad, edad} = {35, 15}
(MatchError) no match of right hand side value: {35, 15}
#+END_SRC

** Pattern Matching
Usamos =_= para ignorar elementos en el patron.

Ejemplo:
#+BEGIN_SRC elixir
iex> {nombre, _} = {"Albert", "Amiguito"}
{"Albert", "Amiguito"}
iex> nombre
"Albert"
#Tambien puedo usar la siguiente forma solo por un tema de documentación
iex> {nombre, _apodo} = {"Albert", "Amiguito"}
{"Albert", "Amiguito"}
iex> edad
warning: ...........
#+END_SRC

** Pattern Matching
En el patron podemos incluir informacion.

Ejemplo:
#+BEGIN_SRC elixir
iex> {"Albert", apodo} = {"Albert", "Amiguito"}
{"Albert", "Amiguito"}
iex> apodo
"Amiguito"

iex> {"Amiguito", apodo} = {"Albert", "Amiguito"}
(MatchError) no match of right hand side value: 
#+END_SRC

** Operador Match
Usamos =^= cuando queremos usar el valor de las variables pero en el lado del patron.

Ejemplo:
#+BEGIN_SRC elixir
iex> nombre = "Albert"
"Albert"
iex> {^nombre, ciudad} = {"Albert", "Huaraz"}
{"Albert", "Huaraz"}
iex> ciudad
"Huaraz"
#+END_SRC

** Operador Match
Todos los Tipos de datos en Elixir pueden ser matcheados.

Ejemplo:
#+BEGIN_SRC elixir
#Mapas
iex> %{nombre: nombre, ciudad: ciudad} = %{nombre: "Albert", ciudad: "Huaraz"}
#Estructuras
iex> %Persona{} = %Persona{nombre: "Albert", ciudad: "Huaraz"}
{"Albert", "Huaraz"}
#Binarios
iex> "Hola " <> palabra = "Hola Mundo"
"Hola Mundo"
iex> palabra
mundo
#+END_SRC

** 😲
#+BEGIN_SRC elixir
iex> [<b>a</b>,_,_,_, %{value: <b>a</b>}] = [<b>1</b>, 2, 3, 4, %{value: <b>1</b>}]
iex> [<b>a</b>,_,_,_, %{value: <b>a</b>}] = [<b>1</b>, 2, 3, 4, %{value: <b>2</b>}]
#+END_SRC

* Funciones
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* Funciones
#+BEGIN_CENTER
#+ATTR_HTML: :height 300px
[[file:images/funciones.png]]
#+END_CENTER

* 
  :PROPERTIES:
  :FILL:     images/clasificador-moneda.jpeg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Funciones anonimas
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* Funciones anonimas
#+BEGIN_SRC elixir
#<b>fn</b>(<parametro1>, <parametro2>, ....) <b>-></b> <ejecucion y retorno> <b>end</b>

iex> <b>velocidad = fn</b> (altura) <b>-></b> :math.sqrt(2 * 9.81 * altura) <b>end</b>
#Function<6.52032458/1 in :erl_eval.expr/5>
iex> velocidad<b>.</b>(3)
7.672027111526653

iex> <b>sum = fn</b> (a, b) <b>-></b> a + b <b>end</b>
#Function<12.17052888 in :erl_eval.expr/5>
iex> sum<b>.</b>(1, 2)
3
#+END_SRC

* Funciones anonimas y pattern matching
#+BEGIN_SRC elixir
iex> velocidad = <b>fn</b>
...> <b>(altura) when is_number(altura)</b> -> :math.sqrt(2 * 9.81 * altura)
...> <b>(_)</b> -> "Qué paso amiguito?"
...> <b>end</b>
#Function<6.52032458/1 in :erl_eval.expr/5>

iex> velocidad(3)
7.672027111526653

iex> velocidad.("Holi")
"Qué paso amiguito?"
#+END_SRC

* Otro Ejemplo
#+BEGIN_SRC elixir
handle_open = fn
  <b>{:ok, file}</b> -> "Read data: #{IO.read(file, :line)}"
  <b>{_, error}</b> -> "Error: #{:file.format_error(error)}"
end

handle_open.(File.open("albert.livemd"))
handle_open.(File.open("nonexistent"))
#+END_SRC
* Shortcut &
#+BEGIN_SRC elixir
iex> cociente_residuo = &{ div(&1,&2), rem(&1,&2) }
iex> cociente_residuo.(13, 5)
{2, 3}
iex> lista = &[&1, &1 * 2, &1 * 3]
iex> lista.(5)
[5, 10, 15]
#+END_SRC

* Funciones con nombre
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Funciones con nombre
#+BEGIN_SRC elixir
<b>defmodule Caida</b> do
  def <b>velocidad</b>(altura) <b>do</b>
    :math.sqrt(2 * 9.81 * altura)
  <b>end</b>
end
#+END_SRC

** Funciones con nombre y pattern matching
#+BEGIN_SRC elixir
defmodule Factorial do
  def de(<b>0</b>)<b>, do:</b> 1
  def de(<b>n</b>) when <b>is_number(n), do:</b> n * de(n-1)
  def de(<b>_), do:</b> "Que paso amiguito?"
end
#+END_SRC

** Inmutabilidad
En el *paradigma funcional*, la inmutabilidad consiste en la *incapacidad de reasignar variables*.

En Elixir, *es posible reasignar variables*. Pero para Elixir, inmutabilidad significa que *las funciones no pueden modificar a sus parametros*.

En Elixir *no existe el concepto de referencia de variables*.

** Inmutabilidad
#+BEGIN_SRC elixir
iex> nombre = "Albert"
iex> nombre = "Elixir Mexico"

iex> mapa = %{nombre: "Albert", location: "Peru"}
iex> Map.put(mapa, :location, "Mexico")
<b>%{nombre: "Albert", location: "Mexico"}</b>
iex> mapa
<b>%{nombre: "Albert", location: "Peru"}</b>
#+END_SRC

** Pureza
#+BEGIN_QUOTE
When we can’t predict the results of a function, the function is impure.
  -- O'Reilly
#+END_QUOTE

Elixir tiene funciones impuras, porque estas son capaces de comunicarse con archivos, pseudorandom code 
(Side Effect)

* Pipe Operator
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Pipe Operator =|>=
#+BEGIN_CENTER
#+ATTR_HTML: :width 500px
[[file:images/production_line.png]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:13]
Nota[fn:14]
#+END_QUOTE

** Pipe Operator =|>=
#+BEGIN_CENTER
#+ATTR_HTML: :width 295px
[[file:images/chain_function.png]]
#+END_CENTER

** Pipe Operator =|>=
Diseñado para resolver este problema (basado en pipeline de unix):
#+BEGIN_SRC elixir
lista = 1..500000
temp = Enum.map(lista, &(&1*2-20))
respuesta = Enum.filter(temp, &(rem(&1, 3) == 0 || rem(&1, 5) == 0))
respuesta = Enum.take(temp, 5)

Enum.take(Enum.filter(Enum.map(1..500000, &(&1*2-20)),
&(rem(&1, 3) == 0 || rem(&1, 5) == 0)), 5)
#+END_SRC

** Pipe Operator =|>=
Podemos usar algo más elegante y eficiente
#+BEGIN_SRC elixir
1..500000
  |> Enum.map(&(&1*2-20))
  |> Enum.filter(&(rem(&1, 3) == 0 || rem(&1, 5) == 0))
  |> Enum.take(5)
#+END_SRC

* Special Forms
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:
=case=, =with=, =for=

** case
Es una forma especial que se utiliza para aprovechar *pattern matching* sin crear nuevas funciones.
#+BEGIN_SRC elixir
def delete_user(_, _, %{context: %{current_user: user}}) do
  case Accounts.delete_user(user) do
    {:ok, user} ->
      {:ok, user}

    {:error, changeset} ->
      {:error,
        message: "Could not delete user",
        details: ChangesetErrors.error_details(changeset)}
  end
end
#+END_SRC


** with
Es una forma especial que se utiliza para *encadenar/combinar operaciones pattern matching* que se comportan como *requisitos* para ejecutar una accion especifica.

*Si una de estas operaciones falla, la cadena se aborta y se devuelve el ultimo valor no coincidente.*

** with
#+BEGIN_SRC elixir
iex> opts = %{width: 10}
iex> with {:ok, width} <- Map.fetch(opts, :width),
iex>      {:ok, height} <- Map.fetch(opts, :height)
iex> do
iex>  {:ok, width * height}
iex> end
:error
#+END_SRC

** with
:PROPERTIES:
:ARTICLE:  smaller
:END:
#+BEGIN_SRC elixir
def update_current_recruiter(_, args, %{context: %{current_user: user}}) do
  with <b>recruiter <- Accounts.get_recruiter_from_user(user),
       params <- Enum.into(args, %{}),
       {:ok, recruiter} <- Recruitment.update_recruiter(recruiter, params)</b>
  do
    {:ok, recruiter}
  else
    <b>nil</b> ->
      {:error, 
        message: "Current user is not a recruiter", 
        details: %{amiguito: "amiguito"}}

    <b>{:error, changeset}</b> ->
      {:error,
        message: "Could not update recruiter", 
        details: ChangesetErrors.error_details(changeset)}
  end
end
#+END_SRC

** for (comprehension)
Es una forma especial que se utiliza como *generador* de combinaciones.

#+BEGIN_SRC elixir
iex> one = [1,2,3]
iex> two = [4,5,6]
iex> for a <- one, b <- two, do: [a, b]  

iex> divisible_by_5? = &(rem(&1, 5) == 0)
iex> for n <- 1..100, divisible_by_5?.(n), do: n  
#+END_SRC

** for (comprehension)
#+BEGIN_SRC elixir
defmodule Strain do
  def keep([head | tail], fun) do
    case fun.(head) do
      true -> [head | keep(tail, fun)]
      false -> keep(tail, fun)
    end
  end
  def keep([], _fun), do: []

  def discard(list, fun), do: keep(list, &(!fun.(&1)))
end
#+END_SRC

** for (comprehension)
#+BEGIN_SRC elixir
defmodule Strain do
  def keep(list, fun), do: for x <- list, fun.(x), do: x

  def discard(list, fun), do: for x <- list, !fun.(x), do: x
end
#+END_SRC

* Thank You ʕ•ᴥ•ʔ
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

* Footnotes
[fn:1] [[https://erlang-companies.org/][Erlang companies]]
[fn:2] [[https://content.nanobox.io/discord-elixir-concurrency-template-high-performance/][Discord's Use of Elixir to Handle Concurrency: A Template for Achieving High Performance]]
[fn:3] [[https://blog.discordapp.com/tagged/elixir][Discord Blog - Tag Elixir]]
[fn:4] [[https://www.youtube.com/watch?v=P89N1YJBjpA][ZenMonitor: Scaling Distributed Monitoring at Discord | Code BEAM SF 19]]

[fn:5] [[https://www.youtube.com/watch?v=37V6L1EA4ac][ElixirConf 2017 - Elixir The Toyota Way - Powell Kinney]]
[fn:6] [[https://codesync.global/media/elixir-powers-first-car-share-service-from-toyota/][Elixir powers first Car Share Service from Toyota]]
[fn:7] [[https://www.drivehui.com/][Hui - Proyecto de Toyota Connected que usa Elixir]]
[fn:8] [[https://medium.com/@Pinterest_Engineering/introducing-new-open-source-tools-for-the-elixir-community-2f7bb0bb7d8c][Introducing new open-source tools for the Elixir community]]
[fn:9] [[https://github.com/se-apc][APC Github]]
[fn:10] [[https://serokell.io/blog/elixir-companies][Some other companies]]
[fn:11] [[https://www.poetic oding.com/the-beauty-of-pattern-matching-in-elixir/][The beauty of Pattern Matching in elixir]]
[fn:12] [[https://blog.carbonfive.com/2017/10/19/pattern-matching-in-elixir-five-things-to-remember/][Pattern Matching in Elixir: Five Things To Remember]]
[fn:13] [[https://elixircasts.io/pipe-operator][Pipe Operator - ElixirCasts]]
[fn:14] [[https://medium.com/@kkomaz/baby-steps-to-elixir-pipe-operator-a82257bdc28d][Baby Steps to Elixir: Pipe Operator |>]]